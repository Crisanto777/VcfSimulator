import argparse
import datetime
import random
import derive_genotypes


def setup_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument('-input', '-i', help="The file containing the output of a call to ms")
    parser.add_argument('-output', '-o', help="The name of the file to output. Please include the extension.")
    
    return parser


# Takes in a file that is the output of the ms hudson simulator
def load_haps(filename):
    haps = []
    with open(filename, 'rb') as f:
        #the start of the file contains information unrelated
        #to the haplotypes
        start_processing = False
        for line in f:
            if start_processing:
                haps.append(line.strip())
            else:
                #the line that specifies positions precedes the
                #start of the list of haplotypes
                if len(line) > 0:
                    try:
                        if line.split()[0] == "positions:":
                            start_processing = True
                    except:
                        pass
    return haps

# Takes in a list of sequences where each list is itself a list of individual characters and outputs 
# the entire block
def print_sequence(geno):
    for gen in geno:
        print ''.join(gen).rstrip()
        

def writeVcf(path, genome_name, snp_identity_hash, hapseq1, hapseq2):

    #genome_name is something of the form NA0001 etc
    rng = random.randint
    curr_snp_num = rng(0,1000)

    #can set this to false if need to debug
    if True:
        with open(path, 'w') as f:
            f.write("##fileformat=VCFv4.0\n")
            f.write("##filedate=" 
                    + str(datetime
                        .date
                        .today())
                    .replace("-", "") + "\n")
            f.write("##reference=simulated data\n")
            f.write("##phasing=phased\n")
            f.write("##FILTER=<ID=q10,Description=\"Quality below 10\">\n")
            f.write("##FILTER=<ID=s50,Description=\"Less than 50% of samples have data\">\n")
            f.write("##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n")
            f.write("##FORMAT=<ID=GQ,Number=1,Type=Integer,Description=\"Genotype Quality\">\n")
            f.write("##FORMAT=<ID=DP,Number=1,Type=Integer,Description=\"Read Depth\">\n")
            f.write("##FORMAT=<ID=HQ,Number=2,Type=Integer,Description=\"Haplotype Quality\">\n")
            f.write("#CHROM POS    ID    REF ALT    QUAL FILTER INFO    FORMAT\t" + genome_name + "\n")
            curr_snp_num = curr_snp_num + rng(0,1000)
            for i in xrange(len(hapseq1)):
                hap1 = hapseq1[i]
                hap2 = hapseq2[i]
                vcf_row = generateVcfRow(curr_snp_num, 5, "whatever", "A", "G", hap1, hap2)
                f.write(vcf_row)


def generateVcfRow(chrom_num, snp_pos, id, ref, alt, hap1, hap2):
    #for more info look at http://www.1000genomes.org/wiki/Analysis/vcf4.0

    chrom_num = str(chrom_num)
    snp_pos = str(snp_pos)
    id = str(id)
    ref = str(ref)
    qual = "99"
    filter = "PASS"
    info = "."
    format = "GT:GQ:DP:HQ"
    alleles = str(hap1) + "|" + str(hap2) 
    formatted_info = str(alleles + ":"
                      + "48" + ":"
                      + "1" + ":" 
                      + "51,51")

    new_row_string = (chrom_num + "\t" 
            + snp_pos + "\t"
            + id + "\t"
            + ref + "\t"
            + alt + "\t"
            + qual + "\t"
            + filter + "\t"
            + info + "\t"
            + format + "\t"
            + formatted_info + "\n")

    return new_row_string


def simulate_family(output, haps):
    #this takes the first four haplotypes and assumes that 1 and 2 are father, and 3 and 4 are mother
    #first, arbitrarily assume the first two are the father

    #generate and keep track of snp positions, id's, etc for consistency across all vcf's
    #    this is the snp_identity_hash
    snp_identity_hash = {}

    #then, assume the next two are the other
    #generate the mother using the same id's generated by the father

    #it then simulates a child by choosing one haplotype from the father and one from the mother
    
    #finally, we have code that introduces interesting biological phenomena 
    #simulate de novo mutation
    #simulate gene conversion
    #simulate crossover event
    writeVcf(output, "NA0001", snp_identity_hash, haps[0], haps[1])
    pass


if __name__ == "__main__":
    parser = setup_parser()
    args = parser.parse_args()
    haps = load_haps(args.input)
    simulate_family(args.output, haps)    
    # print_sequence(haps)
    # geno = derive_genotypes(haps)
    # print_sequence(geno)